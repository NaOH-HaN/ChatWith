name: Build and Release

on:
  push:
    tags:
      - 'Release-v*'
      - 'Pre-Release-v*'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~\AppData\Local\pip\Cache
          venv/
        key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: pyinstaller --onefile --name ChatWith src/main.py

    - name: Verify build
      run: |
        if not exist dist\ChatWith.exe (
          echo "::error::Build failed"
          exit 1
        )

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: |
          dist/
          LICENSE
          NOTICE

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: release-package

    - name: Set build time
      id: time
      run: echo "time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

    - name: Parse version
      id: parse-version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG/*-/}
        echo "version=${VERSION/v/}" >> $GITHUB_OUTPUT
        if [[ "$TAG" == Pre-Release* ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: ChatWith ${{ steps.parse-version.outputs.version }}
        prerelease: ${{ steps.parse-version.outputs.prerelease }}
        files: |
          release-package/dist/ChatWith.exe
          release-package/LICENSE
          release-package/NOTICE
        body: |
          **版本信息**
          - 版本号：${{ steps.parse-version.outputs.version }}
          - 构建时间：${{ steps.time.outputs.time }}
          
          **文件校验**
          ```sh
          sha256sum ChatWith.exe
          $(sha256sum release-package/dist/ChatWith.exe | cut -d' ' -f1)
          ```