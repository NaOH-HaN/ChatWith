name: Build and Release

on:
  push:
    tags:
      - 'Release-v*'     # 格式：Release-v1.0
      - 'Pre-Release-v*' # 格式：Pre-Release-v1.0-rc1

jobs:
  build:
    runs-on: windows-latest

    steps:
        - name: Checkout code
          uses: actions/checkout@v4
    
        - name: Set up Python 3.10
          uses: actions/setup-python@v5
          with:
            python-version: "3.10"
    
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pyinstaller
    
        - name: Add Python to PATH
          run: |
            echo "Adding Python to PATH"
            echo "${{ env.pythonLocation }}" >> $GITHUB_PATH
            echo "${{ env.pythonLocation }}\\Scripts" >> $GITHUB_PATH
    
        - name: Build executable
          run: |
            pyinstaller --onefile --name ChatWith --distpath dist --workpath build --specpath build src/main.py
            # 如果使用spec文件
            # pyinstaller build/ChatWith.spec
    
        - name: Archive output
          uses: actions/upload-artifact@v4
          with:
            name: ChatWith-Executable
            path: dist/

  publish-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ChatWith-Executable

    - name: Parse tag info
      id: tag-parser
      run: |
        TAG_NAME="${GITHUB_REF#refs/tags/}"
        
        # 解析版本前缀
        if [[ "$TAG_NAME" == Pre-Release-* ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          VERSION=${TAG_NAME#Pre-Release-}
        elif [[ "$TAG_NAME" == Release-* ]]; then
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          VERSION=${TAG_NAME#Release-}
        else
          echo "::error::Invalid tag format: $TAG_NAME"
          exit 1
        fi

        # 清理可能的v前缀（兼容两种写法：Release-v1.0 或 Release-1.0）
        CLEAN_VERSION=$(echo "$VERSION" | sed 's/^v//')
        echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ChatWith ${{ steps.tag-parser.outputs.clean_version }}
        draft: false
        prerelease: ${{ steps.tag-parser.outputs.is_prerelease }}
        body: |
          **版本标识符**  
          ```
          ${{ github.ref }}
          ```

          **构建信息**  
          - 构建时间: ${{ steps.get-time.outputs.time }}
          - 运行环境: ${{ runner.os }} (GitHub Actions)

          **文件校验**  
          SHA256: ${{ hashFiles('ChatWith-Executable/ChatWith.exe') }}

    # 添加时间戳获取步骤（在parse tag info步骤之前）
    - name: Get current time
      id: get-time
      run: echo "time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ChatWith.exe
        asset_name: ChatWith-${{ steps.tag-parser.outputs.clean_version }}.exe
        asset_content_type: application/octet-stream

    - name: Verify release
      run: |
        if [ -z "${{ steps.create_release.outputs.upload_url }}" ]; then
          echo "::error::Release creation failed"
          exit 1
        fi
        echo "Release published successfully"