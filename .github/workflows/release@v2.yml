name: Build and Release

on:
  push:
    tags:
      - 'Release-v*'
      - 'Pre-Release-v*'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile \
        --name ChatWith \
        --distpath dist \
        --workpath build \
        src/main.py

    - name: Verify executable
      run: |
        if not exist dist\ChatWith.exe (
          echo "::error::Build failed: Executable not found"
          exit 1
        )
        echo "Build successful"

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: chatwith-exe
        path: dist/ChatWith.exe

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          venv/
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

  publish-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: chatwith-exe
        path: release-assets

    - name: Get current time
      id: get-time
      run: echo "time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

    - name: Parse tag info
      id: tag-parser
      run: |
        TAG_NAME="${GITHUB_REF#refs/tags/}"
        
        if [[ "$TAG_NAME" == Pre-Release-* ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          VERSION=${TAG_NAME#Pre-Release-}
        elif [[ "$TAG_NAME" == Release-* ]]; then
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          VERSION=${TAG_NAME#Release-}
        else
          echo "::error::Invalid tag format: $TAG_NAME"
          exit 1
        fi

        CLEAN_VERSION=$(echo "$VERSION" | sed 's/^v//')
        echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: ChatWith ${{ steps.tag-parser.outputs.clean_version }}
        prerelease: ${{ steps.tag-parser.outputs.is_prerelease }}
        body: |
          **构建信息**
          - 版本号: ${{ steps.tag-parser.outputs.clean_version }}
          - 构建时间: ${{ steps.get-time.outputs.time }}
          
          **文件校验**
          SHA256: $(sha256sum release-assets/ChatWith.exe | cut -d ' ' -f 1)
        files: |
          release-assets/ChatWith.exe